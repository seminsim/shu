// automatically generated by the FlatBuffers compiler, do not modify

package protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

const (
	KeyboardActionStay    = 1
	KeyboardActionKeyDown = 2
	KeyboardActionKeyUp   = 3
)

var EnumNamesKeyboardAction = map[int]string{
	KeyboardActionStay:    "Stay",
	KeyboardActionKeyDown: "KeyDown",
	KeyboardActionKeyUp:   "KeyUp",
}

type PlayerMovement struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerMovement(buf []byte, offset flatbuffers.UOffsetT) *PlayerMovement {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerMovement{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PlayerMovement) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlayerMovement) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PlayerMovement) ObjectId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerMovement) MutateObjectId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *PlayerMovement) KeyUp() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerMovement) MutateKeyUp(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func (rcv *PlayerMovement) KeyDown() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerMovement) MutateKeyDown(n int8) bool {
	return rcv._tab.MutateInt8Slot(8, n)
}

func (rcv *PlayerMovement) KeyLeft() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerMovement) MutateKeyLeft(n int8) bool {
	return rcv._tab.MutateInt8Slot(10, n)
}

func (rcv *PlayerMovement) KeyRight() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerMovement) MutateKeyRight(n int8) bool {
	return rcv._tab.MutateInt8Slot(12, n)
}

func (rcv *PlayerMovement) Direction() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerMovement) MutateDirection(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func PlayerMovementStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func PlayerMovementAddObjectId(builder *flatbuffers.Builder, objectId uint32) {
	builder.PrependUint32Slot(0, objectId, 0)
}
func PlayerMovementAddKeyUp(builder *flatbuffers.Builder, keyUp int8) {
	builder.PrependInt8Slot(1, keyUp, 0)
}
func PlayerMovementAddKeyDown(builder *flatbuffers.Builder, keyDown int8) {
	builder.PrependInt8Slot(2, keyDown, 0)
}
func PlayerMovementAddKeyLeft(builder *flatbuffers.Builder, keyLeft int8) {
	builder.PrependInt8Slot(3, keyLeft, 0)
}
func PlayerMovementAddKeyRight(builder *flatbuffers.Builder, keyRight int8) {
	builder.PrependInt8Slot(4, keyRight, 0)
}
func PlayerMovementAddDirection(builder *flatbuffers.Builder, direction int32) {
	builder.PrependInt32Slot(5, direction, 0)
}
func PlayerMovementEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
