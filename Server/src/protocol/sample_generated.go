// automatically generated by the FlatBuffers compiler, do not modify

package protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

const (
	ColorRed = 1
	ColorGreen = 2
	ColorBlue = 3
)

var EnumNamesColor = map[int]string{
	ColorRed:"Red",
	ColorGreen:"Green",
	ColorBlue:"Blue",
}

const (
	WeaponClassesOrWhateverNONE = 0
	WeaponClassesOrWhateverSword = 1
	WeaponClassesOrWhateverGun = 2
)

var EnumNamesWeaponClassesOrWhatever = map[int]string{
	WeaponClassesOrWhateverNONE:"NONE",
	WeaponClassesOrWhateverSword:"Sword",
	WeaponClassesOrWhateverGun:"Gun",
}

type Vec3 struct {
	_tab flatbuffers.Struct
}

func (rcv *Vec3) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Vec3) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Vec3) X() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Vec3) MutateX(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Vec3) Y() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *Vec3) MutateY(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *Vec3) Z() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *Vec3) MutateZ(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func CreateVec3(builder *flatbuffers.Builder, x float32, y float32, z float32) flatbuffers.UOffsetT {
	builder.Prep(4, 12)
	builder.PrependFloat32(z)
	builder.PrependFloat32(y)
	builder.PrependFloat32(x)
	return builder.Offset()
}
type GameDataWhatever struct {
	_tab flatbuffers.Table
}

func GetRootAsGameDataWhatever(buf []byte, offset flatbuffers.UOffsetT) *GameDataWhatever {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameDataWhatever{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameDataWhatever) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameDataWhatever) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GameDataWhatever) Pos(obj *Vec3) *Vec3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vec3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GameDataWhatever) Mana() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 150
}

func (rcv *GameDataWhatever) MutateMana(n int16) bool {
	return rcv._tab.MutateInt16Slot(6, n)
}

func (rcv *GameDataWhatever) Hp() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 100
}

func (rcv *GameDataWhatever) MutateHp(n int16) bool {
	return rcv._tab.MutateInt16Slot(8, n)
}

func (rcv *GameDataWhatever) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GameDataWhatever) Inventory(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *GameDataWhatever) InventoryLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameDataWhatever) InventoryBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GameDataWhatever) Color() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 3
}

func (rcv *GameDataWhatever) MutateColor(n int8) bool {
	return rcv._tab.MutateInt8Slot(14, n)
}

func (rcv *GameDataWhatever) WeaponType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameDataWhatever) MutateWeaponType(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

func (rcv *GameDataWhatever) Weapon(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func GameDataWhateverStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func GameDataWhateverAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(pos), 0)
}
func GameDataWhateverAddMana(builder *flatbuffers.Builder, mana int16) {
	builder.PrependInt16Slot(1, mana, 150)
}
func GameDataWhateverAddHp(builder *flatbuffers.Builder, hp int16) {
	builder.PrependInt16Slot(2, hp, 100)
}
func GameDataWhateverAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func GameDataWhateverAddInventory(builder *flatbuffers.Builder, inventory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(inventory), 0)
}
func GameDataWhateverStartInventoryVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func GameDataWhateverAddColor(builder *flatbuffers.Builder, color int8) {
	builder.PrependInt8Slot(5, color, 3)
}
func GameDataWhateverAddWeaponType(builder *flatbuffers.Builder, weaponType byte) {
	builder.PrependByteSlot(6, weaponType, 0)
}
func GameDataWhateverAddWeapon(builder *flatbuffers.Builder, weapon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(weapon), 0)
}
func GameDataWhateverEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type Sword struct {
	_tab flatbuffers.Table
}

func GetRootAsSword(buf []byte, offset flatbuffers.UOffsetT) *Sword {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sword{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Sword) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sword) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Sword) Damage() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 10
}

func (rcv *Sword) MutateDamage(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Sword) Distance() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 5
}

func (rcv *Sword) MutateDistance(n int16) bool {
	return rcv._tab.MutateInt16Slot(6, n)
}

func SwordStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SwordAddDamage(builder *flatbuffers.Builder, damage int32) {
	builder.PrependInt32Slot(0, damage, 10)
}
func SwordAddDistance(builder *flatbuffers.Builder, distance int16) {
	builder.PrependInt16Slot(1, distance, 5)
}
func SwordEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type Gun struct {
	_tab flatbuffers.Table
}

func GetRootAsGun(buf []byte, offset flatbuffers.UOffsetT) *Gun {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Gun{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Gun) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Gun) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Gun) Damage() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 500
}

func (rcv *Gun) MutateDamage(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Gun) Reloadspeed() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 2
}

func (rcv *Gun) MutateReloadspeed(n int16) bool {
	return rcv._tab.MutateInt16Slot(6, n)
}

func GunStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GunAddDamage(builder *flatbuffers.Builder, damage int32) {
	builder.PrependInt32Slot(0, damage, 500)
}
func GunAddReloadspeed(builder *flatbuffers.Builder, reloadspeed int16) {
	builder.PrependInt16Slot(1, reloadspeed, 2)
}
func GunEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
