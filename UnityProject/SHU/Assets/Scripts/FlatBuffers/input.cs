// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SHU.FlatBuffers.Input
{

using global::System;
using global::FlatBuffers;

public enum KeyboardAction : sbyte
{
 Stay = 1,
 KeyDown = 2,
 KeyUp = 3,
};

public struct PlayerMovement : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PlayerMovement GetRootAsPlayerMovement(ByteBuffer _bb) { return GetRootAsPlayerMovement(_bb, new PlayerMovement()); }
  public static PlayerMovement GetRootAsPlayerMovement(ByteBuffer _bb, PlayerMovement obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool PlayerMovementBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "plmv"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PlayerMovement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint ObjectId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public KeyboardAction KeyUp { get { int o = __p.__offset(6); return o != 0 ? (KeyboardAction)__p.bb.GetSbyte(o + __p.bb_pos) : 0; } }
  public KeyboardAction KeyDown { get { int o = __p.__offset(8); return o != 0 ? (KeyboardAction)__p.bb.GetSbyte(o + __p.bb_pos) : 0; } }
  public KeyboardAction KeyLeft { get { int o = __p.__offset(10); return o != 0 ? (KeyboardAction)__p.bb.GetSbyte(o + __p.bb_pos) : 0; } }
  public KeyboardAction KeyRight { get { int o = __p.__offset(12); return o != 0 ? (KeyboardAction)__p.bb.GetSbyte(o + __p.bb_pos) : 0; } }
  public int Direction { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PlayerMovement> CreatePlayerMovement(FlatBufferBuilder builder,
      uint objectId = 0,
      KeyboardAction keyUp = 0,
      KeyboardAction keyDown = 0,
      KeyboardAction keyLeft = 0,
      KeyboardAction keyRight = 0,
      int direction = 0) {
    builder.StartObject(6);
    PlayerMovement.AddDirection(builder, direction);
    PlayerMovement.AddObjectId(builder, objectId);
    PlayerMovement.AddKeyRight(builder, keyRight);
    PlayerMovement.AddKeyLeft(builder, keyLeft);
    PlayerMovement.AddKeyDown(builder, keyDown);
    PlayerMovement.AddKeyUp(builder, keyUp);
    return PlayerMovement.EndPlayerMovement(builder);
  }

  public static void StartPlayerMovement(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddObjectId(FlatBufferBuilder builder, uint objectId) { builder.AddUint(0, objectId, 0); }
  public static void AddKeyUp(FlatBufferBuilder builder, KeyboardAction keyUp) { builder.AddSbyte(1, (sbyte)keyUp, 0); }
  public static void AddKeyDown(FlatBufferBuilder builder, KeyboardAction keyDown) { builder.AddSbyte(2, (sbyte)keyDown, 0); }
  public static void AddKeyLeft(FlatBufferBuilder builder, KeyboardAction keyLeft) { builder.AddSbyte(3, (sbyte)keyLeft, 0); }
  public static void AddKeyRight(FlatBufferBuilder builder, KeyboardAction keyRight) { builder.AddSbyte(4, (sbyte)keyRight, 0); }
  public static void AddDirection(FlatBufferBuilder builder, int direction) { builder.AddInt(5, direction, 0); }
  public static Offset<PlayerMovement> EndPlayerMovement(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PlayerMovement>(o);
  }
  public static void FinishPlayerMovementBuffer(FlatBufferBuilder builder, Offset<PlayerMovement> offset) { builder.Finish(offset.Value, "plmv"); }
};


}
