// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SHU.FlatBuffers.Ping
{

using global::System;
using global::FlatBuffers;

public struct Ping : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Ping GetRootAsPing(ByteBuffer _bb) { return GetRootAsPing(_bb, new Ping()); }
  public static Ping GetRootAsPing(ByteBuffer _bb, Ping obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool PingBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ping"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Ping __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ClientTime { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Ping> CreatePing(FlatBufferBuilder builder,
      long clientTime = 0) {
    builder.StartObject(1);
    Ping.AddClientTime(builder, clientTime);
    return Ping.EndPing(builder);
  }

  public static void StartPing(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddClientTime(FlatBufferBuilder builder, long clientTime) { builder.AddLong(0, clientTime, 0); }
  public static Offset<Ping> EndPing(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Ping>(o);
  }
  public static void FinishPingBuffer(FlatBufferBuilder builder, Offset<Ping> offset) { builder.Finish(offset.Value, "ping"); }
};


}
